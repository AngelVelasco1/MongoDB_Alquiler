use("db_campus_alquiler");

//? Schemas
use("db_campus_alquiler");
db.createCollection("sucursal", {
    capped: true,
    size: 690,
    max: 5,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["ID_sucursal", "Nombre", "Direccion", "Telefono"],
            properties: {
                ID_sucursal: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 15,
                    description: "Id de la sucursal. Su numero debe estar en un rango de 0 a 15"
                },
                Nombre: {
                    bsonType: "string",
                    pattern: "^[A-Za-z\\s]+$",
                    description: "Especifica el nombre de la sucursal. Debe ser un string sin caracteres especiales"
                },
                Direccion: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z0-9\\s\\.,#-]+$",
                    description: "Especifica la direccion. Debe ser un string"
                },
                Telefono: {
                    bsonType: "string",
                    pattern: "^(?:(?:\\+\\d{1,3}|0)[\\d- ]+)?\\d+$",
                    description: "Especifica el telefono. Debe ser un string con un formato similar a +57 311-578-4123"
                }
            }
        }
    }
});
use("db_campus_alquiler");
db.sucursal.insertMany([
    {
        ID_sucursal: 1,
        Nombre: "Giron",
        Direccion: "calle 20 #51",
        Telefono: "+57 311-578-4123",
    },
    {
        ID_sucursal: 2,
        Nombre: "Floridablanca",
        Direccion: "carrera 10 #15",
        Telefono: "+57 316-142-2579",
    },
    {
        ID_sucursal: 3,
        Nombre: "Medellin",
        Direccion: "calle 1 #21",
        Telefono: "+57 321-455-1144",
    },
    {
        ID_sucursal: 4,
        Nombre: "Buenos Aires",
        Direccion: "calle 48 #33",
        Telefono: "+54 9 11 1234-5679",
    },
    {
        ID_sucursal: 5,
        Nombre: "Bogota",
        Direccion: "calle 50 #15",
        Telefono: "+57 318-147-8998",
    }
]);

//? Consultas 

//? 1. Mostrar todos los clientes registrados en la base de datos.
use("db_campus_alquiler:");
db.cliente.find()

//? 2. Obtener todos los automóviles disponibles para alquiler.
use("db_campus_alquiler:");
db.automovil.aggregate([
    {
        $lookup: {
            from: "alquiler",
            localField: "ID_Automovil_id",
            foreignField: "ID_Automovil_id",
            as: "Alquileres",
        }
    },
    {
        $project: {
            "ID_Automovil_id": 0,
            "Alquileres.ID_Alquiler": 0,
            "Alquileres.ID_Automovil_id": 0,
            "Alquileres.ID_Cliente_id": 0
        }
    },
    {
        $unwind: "$Alquileres"
    },
    {
        $match: {
            Alquileres: { $exists: true, $ne: [] }
        }
    }

]);

//? 3. Listar todos los alquileres activos junto con los datos de los clientes relacionados.
use("db_campus_alquiler:");
db.cliente.aggregate([
    {
        $lookup: {
            from: "alquiler",
            localField: "_id",
            foreignField: "ID_Cliente_id",
            as: "Alquileres",
        },
    },
    {
        $project: {
            "Alquileres._id": 0,
            "Alquileres.ID_Alquiler": 0,
            "Alquileres.ID_Automovil_id": 0,
            "Alquileres.ID_Cliente_id": 0
        }
    },
    {
        $unwind: "$Alquileres"
    },
    {
        $match: {
            "Alquileres.Estado": {
                $eq: true
            }
        }
    }
]);

//? 4. Mostrar todas las reservas pendientes con los datos del cliente y el automóvil reservado.
use("db_campus_alquiler:");
db.reserva.aggregate([
    {
        $lookup: {
            from: "automovil",
            localField: "ID_Automovil_id",
            foreignField: "_id",
            as: "Automoviles"
        },
    },
    {
        $lookup: {
            from: "cliente",
            localField: "ID_Cliente_id",
            foreignField: "_id",
            as: "Clientes"
        }
    },
    {
        $unwind: "$Automoviles",
    },
    {
        $unwind: "$Clientes"

    },
    {
        $match: {
            Estado: { $eq: "Pendiente" }
        }
    },
    {
        $project: {
            "_id": 0,
            "Estado": 0,
            "ID_Reserva": 0,
            "ID_Cliente_id": 0,
            "ID_Automovil_id": 0,
            "Clientes._id": 0,
            "Clientes.ID_Cliente": 0,
            "Automoviles._id": 0,
            "Automoviles.ID_Cliente": 0,
            "Automoviles.ID_Automovil_id": 0

        }
    }
]);

//? 5. Obtener los detalles del alquiler con el ID_Alquiler específico. 
use("db_campus_alquiler:");
db.alquiler.find({ ID_Alquiler: { $eq: ObjectId("64c90bd3dd7baec87a23e154") } });

//? 6. Listar los empleados con el cargo de "Vendedor"
use("db_campus_alquiler:");
db.empleado.find({ Cargo: { $eq: "Vendedor" } })

//? 7. Cantidad total de automoviles de cada sucursal
use("db_campus_alquiler:");
db.sucursal.aggregate([
    {
        $lookup: {
            from: "sucursal_automovil",
            localField: "_id",
            foreignField: "ID_Sucursal_id",
            as: "Automoviles"
        }
    },
    {
        $unwind: "$Automoviles"
    },
    {
        $project: {
            "_id": 0,
            "Automoviles._id": 0,
            "Automoviles.ID_Sucursal_id": 0,
            "Automoviles.ID_Automovil": 0,
            "Automoviles.Name": 0,
        }
    }


])

//? 8. Obtener el costo total de un alquiler específico. 
use("db_campus_alquiler:");
db.alquiler.aggregate([
    {
        $match: {
            ID_Alquiler: { $eq: ObjectId("64c854fcda0104b3f605ce06") }
        }
    },
    {
        $project: {
            "_id": 0,
            "ID_Alquiler": 0,
            "ID_Automovil_id": 0,
            "ID_Cliente_id": 0,
            "Fecha_Inicio": 0,
            "Fecha_Fin": 0,
            "Fecha_Fin": 0,
            "Estado": 0
        }
    }
]);

//? 9 .Listar los clientes con el DNI específico. 
use("db_campus_alquiler:");
db.cliente.aggregate([
    {
        $match: {
            DNI: { $eq: 10988456554 }
        }
    },
    {
        $project: {
            "ID_Cliente": 0,
            "_id": 0
        }
    }
]);

//? 10. Mostrar todos los automóviles con una capacidad mayor a 5 personas
use("db_campus_alquiler:");
db.automovil.find({ capacidad: { $gt: 5 } });

//? 11. Obtener los detalles del alquiler que tiene fecha de inicio en '2023-07-05'
use("db_campus_alquiler:");
db.alquiler.find({ Fecha_Inicio: { $eq: "2023-07-05" } })

//? 12. Listar las reservas pendientes realizadas por un cliente específico
use("db_campus_alquiler:");
db.cliente.aggregate([
    {
        $lookup: {
            from: "reserva",
            localField: "ID_Cliente",
            foreignField: "ID_Cliente_id",
            as: "Reservas"
        }
    },
    {
        $unwind: "$Reservas"
    },
    {
        $match: {
            $and: [{ "Reservas.Estado": { $eq: "Pendiente" } }, { ID_Cliente: { $eq: ObjectId("64c8547b0eae2c9b81d69230") } }]
        }
    },
    {
        $group: {
            _id: "$ID_Cliente",
            Cliente: { $first: "$$ROOT" }, // Usamos $$ROOT para mantener el documento completo del cliente
            Reservas: { $push: "$Reservas" } // Agrupamos las reservas en un arreglo
        }
    },
    {
        $project: {
            "_id": 0,
            "Cliente._id": 0,
            "Cliente.ID_Cliente": 0,
            "Cliente.Reservas": 0,
            "Reservas._id": 0,
            "Reservas.ID_Reserva": 0,
            "Reservas.ID_Cliente_id": 0,
            "Reservas.ID_Automovil_id": 0,
        }
    }
]);

//? 13. Mostrar los empleados con cargo de "Gerente" o "Asistente".
use("db_campus_alquiler:");
db.empleado.find({
    $or: [
        { Cargo: { $eq: "Gerente" } },
        { Cargo: { $eq: "Asistente" } }
    ]
});

//? 14. Obtener los datos de los clientes que realizaron al menos un alquiler.
use("db_campus_alquiler:");
db.cliente.aggregate([
    {
        $lookup: {
            from: "alquiler",
            localField: "ID_Cliente",
            foreignField: "ID_Cliente_id",
            as: "Alquileres",
        }
    },
    {
        $unwind: "$Alquileres"
    },
    {
        $match: {
            Alquileres: { $exists: true, $ne: [], }
        }
    },
    {
        $group: {
            _id: "$ID_Cliente",
            Cliente: { $first: "$$ROOT" }, // Usamos $$ROOT para mantener el documento completo del cliente
            Alquileres: { $push: "$Alquileres" } // Agrupamos las reservas en un arreglo
        }
    },
    {
        $project: {
            "_id": 0,
            "Cliente._id": 0,
            "Cliente.ID_Cliente": 0,
            "Cliente.Alquileres": 0,
            "Alquileres._id": 0,
            "Alquileres.ID_Alquiler": 0,
            "Alquileres.ID_Cliente_id": 0,
            "Alquileres.ID_Automovil_id": 0,
        }
    },

]);

//? 15. Listar todos los automóviles ordenados por marca y modelo. 
use("db_campus_alquiler:");
db.automovil.find().sort(
    { Marca: 1 },
    { Modelo: 1 }
);

//? 16. Mostrar la cantidad total de automóviles en cada sucursal junto con su dirección
use("db_campus_alquiler:");
db.sucursal.aggregate([
    {
        $lookup: {
            from: "sucursal_automovil",
            localField: "_id",
            foreignField: "ID_Sucursal_id",
            as: "Automoviles"
        }
    },
    {
        $unwind: "$Automoviles"
    },
    {
        $group: {
            _id: "$_id",
            Nombre: { $first: "$Nombre" },
            Direccion: { $first: "$Direccion" },
            Telefono: { $first: "$Telefono" },
            Cantidad_Total: { $sum: "$Automoviles.cantidad" }

        }

    },
    {
        $project: {
            "_id": 0,
            "Nombre": 1,
            "Direccion": 1,
            "Telefono": 1,
            "Cantidad_Total": 1
        }
    }
])

//? 17. Obtener la cantidad total de alquileres registrados en la base de datos
use("db_campus_alquiler:");
db.alquiler.countDocuments({});

//? 18. .Mostrar los automóviles con capacidad igual a 5 personas y que estén disponibles
use("db_campus_alquiler:");
db.automovil.find({
    $and: [
        {
            capacidad: { $eq: 5 },
        },
        {
            Estado: { $eq: "Disponible" }
        }
    ]
});

//? 19. Listar los alquileres con fecha de inicio entre '2023-07-05' y '2023-07-10'
use("db_campus_alquiler:");
db.alquiler.find({
    Fecha_Inicio: { $gte: new Date("2023-07-05T00:00:00.000+00:00"), $lte: new Date("2023-07-10T00:00:00.000+00:00") }

});