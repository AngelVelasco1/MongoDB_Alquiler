use("db_campus_alquiler");

//? Schemas and limit
use("db_campus_alquiler");
db.createCollection("sucursal", {
    capped: true,
    size: 690,
    max: 5,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["ID_sucursal", "Nombre", "Direccion", "Telefono"],
            properties: {
                ID_sucursal: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 15,
                    description: "Id de la sucursal. Su numero debe estar en un rango de 0 a 15"
                },
                Nombre: {
                    bsonType: "string",
                    pattern: "^[A-Za-z\\s]+$",
                    description: "Especifica el nombre de la sucursal. Debe ser un string sin caracteres especiales"
                },
                Direccion: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z0-9\\s\\.,#-]+$",
                    description: "Especifica la direccion. Debe ser un string"
                },
                Telefono: {
                    bsonType: "string",
                    pattern: "^(?:(?:\\+\\d{1,3}|0)[\\d- ]+)?\\d+$",
                    description: "Especifica el telefono. Debe ser un string con un formato similar a +57 311-578-4123"
                }
            }
        }
    }
});
db.sucursal.insertMany([
    {
        _id: 1,
        ID_sucursal: 1,
        Nombre: "Giron",
        Direccion: "calle 20 #51",
        Telefono: "+57 311-578-4123",
    },
    {
        _id: 2,
        ID_sucursal: 2,
        Nombre: "Floridablanca",
        Direccion: "carrera 10 #15",
        Telefono: "+57 316-142-2579",
    },
    {
        _id: 3,
        ID_sucursal: 3,
        Nombre: "Medellin",
        Direccion: "calle 1 #21",
        Telefono: "+57 321-455-1144",
    },
    {
        _id: 4,
        ID_sucursal: 4,
        Nombre: "Buenos Aires",
        Direccion: "calle 48 #33",
        Telefono: "+54 9 11 1234-5679",
    },
    {
        _id: 5,
        ID_sucursal: 5,
        Nombre: "Bogota",
        Direccion: "calle 50 #15",
        Telefono: "+57 318-147-8998",
    }
]);

use("db_campus_alquiler");
let añoActual = new Date().getFullYear();
db.createCollection("automovil", {
    capped: true,
    size: 690,
    max: 5,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["ID_automovil", "Marca", "Modelo", "Anio", "Tipo", "Capacidad", "Precio_Diario"],
            properties: {
                ID_automovil: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 50,
                    description: "Id del automovil. Debe ser un numero en rango de 0 a 50"
                },
                Marca: {
                    bsonType: "string",
                    pattern: "^[A-Za-z\\s]+$",
                    description: "Especifica la marca del automovil. Debe ser un string sin caracteres especiales"
                },
                Modelo: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z0-9\\s\\.,#-]+$",
                    description: "Especifica el modelo del automovil. Debe ser un string, puedo contener caracteres especiales y numeros"
                },
                Anio: {
                    bsonType: "int",
                    minimum: 1900,
                    maximum: añoActual,
                    description: "Especifica el año del automovil. Debe ser un entero entre 1900 hasta el año presente"
                },
                Tipo: {
                    bsonType: "string",
                    pattern: "^[A-Za-z\\s]+$",
                    description: "Especifica el tipo del automovil. Debe ser un string sin caracteres especiales"
                },
                Capacidad: {
                    bsonType: "int",
                    minimum: 4,
                    maximum: 8,
                    description: "Especifica la capacidad del automovil. Debe ser un numero entre 4 y 8"
                },
                Precio_Diario: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 100000000,
                    description: "Especifica el precio del automovil por dia. Puede ser un numero con partes decimales"
                }
            }
        }
    }
});
db.automovil.insertMany([
    {
        _id: 1,
        ID_automovil: 1,
        Marca: "Chevrolet",
        Modelo: "Renault",
        Anio: 2000,
        Tipo: "Automovil",
        Capacidad: 4,
        Precio_Diario: 50000
    },
    {
        _id: 2,
        ID_automovil: 2,
        Marca: "Mazda",
        Modelo: "Hybrid",
        Anio: 2020,
        Tipo: "Automovil",
        Capacidad: 6,
        Precio_Diario: 120000
    },
    {
        _id: 3,
        ID_automovil: 3,
        Marca: "Volvo",
        Modelo: "V60",
        Anio: 2022,
        Tipo: "Camioneta",
        Capacidad: 7,
        Precio_Diario: 250000
    },
    {
        _id: 4,
        ID_automovil: 4,
        Marca: "BMW",
        Modelo: "Series 7",
        Anio: 2023,
        Tipo: "Automovil",
        Capacidad: 6,
        Precio_Diario: 300000
    },
    {
        _id: 5,
        ID_automovil: 5,
        Marca: "Audi",
        Modelo: "A4",
        Anio: 2021,
        Tipo: "Automovil",
        Capacidad: 5,
        Precio_Diario: 100000
    }
]);

use("db_campus_alquiler")
db.createCollection("sucursal_automovil", {
    capped: true,
    size: 690,
    max: 5
})
db.sucursal_automovil.insertMany([
    {
        _id: 1,
        ID_Sucursal_id: 1,
        ID_Automovil_id: 1,
        Cantidad_Disponible: 10
    },
    {
        _id: 2,
        ID_Sucursal_id: 2,
        ID_Automovil_id: 2,
        Cantidad_Disponible: 20
    },
    {
        _id: 3,
        ID_Sucursal_id: 3,
        ID_Automovil_id: 3,
        Cantidad_Disponible: 5
    },
    {
        _id: 4,
        ID_Sucursal_id: 4,
        ID_Automovil_id: 4,
        Cantidad_Disponible: 15
    },
    {
        _id: 5,
        ID_Sucursal_id: 5,
        ID_Automovil_id: 5,
        Cantidad_Disponible: 40
    },
]);

use("db_campus_alquiler")
db.createCollection("reserva", {
    capped: true,
    size: 790,
    max: 5
})
db.reserva.insertMany([
    {
        _id: 1,
        ID_reserva: 1,
        ID_Cliente_id: 1,
        ID_Automovil_id: 1,
        Fecha_Reserva: "2023-07-15",
        Fecha_Inicio: "2024-01-15",
        Fecha_Fin: "2024-01-20",
        Estado: "Confirmado"
    },
    {
        _id: 2,
        ID_reserva: 2,
        ID_Cliente_id: 2,
        ID_Automovil_id: 2,
        Fecha_Reserva: "2023-07-25",
        Fecha_Inicio: "2024-01-25",
        Fecha_Fin: "2024-01-20",
        Estado: "Confirmado"
    },
    {
        _id: 3,
        ID_reserva: 3,
        ID_Cliente_id: 3,
        ID_Automovil_id: 3,
        Fecha_Reserva: "2023-05-15",
        Fecha_Inicio: "2023-12-01",
        Fecha_Fin: "2024-01-20",
        Estado: "Pendiente"
    },
    {
        _id: 4,
        ID_reserva: 4,
        ID_Cliente_id: 4,
        ID_Automovil_id: 4,
        Fecha_Reserva: "2023-04-31",
        Fecha_Inicio: "2023-06-20",
        Fecha_Fin: "2024-01-20",
        Estado: "Pendiente"
    },
    {
        _id: 5,
        ID_reserva: 5,
        ID_Cliente_id: 5,
        ID_Automovil_id: 5,
        Fecha_Reserva: "2023-07-15",
        Fecha_Inicio: "2023-08-15",
        Fecha_Fin: "2024-01-20",
        Estado: "Confirmado"
    },
]);

use("db_campus_alquiler")
db.createCollection("cliente", {
    capped: true,
    size: 790,
    max: 5,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["ID_cliente", "Nombre", "Apellido", "DNI", "Direccion", "Telefono", "Email"],
            properties: {
                ID_cliente: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 100,
                    description: "Id del cliente. Debe ser un numero en rango de 0 a 100"
                },
                Nombre: {
                    bsonType: "string",
                    pattern: "^[A-Za-z\\s]+$",
                    description: "Nombre del cliente. Debe ser un string sin caracteres especiales"
                },
                Apellido: {
                    bsonType: "string",
                    pattern: "^[A-Za-z\\s]+$",
                    description: "Apellido del cliente. Debe ser un string sin caracteres especiales"
                },
                DNI: {
                    bsonType: "string",
                    pattern: "^[0-9]{7,8}$",
                    description: "Especifica el número de documento de identidad. Debe ser un número de 7 a 8 dígitos."
                },
                Direccion: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z0-9\\s\\.,#-]+$",
                    description: "Especifica la direccion. Debe ser un string"
                },
                Telefono: {
                    bsonType: "string",
                    pattern: "^(?:(?:\\+\\d{1,3}|0)[\\d- ]+)?\\d+$",
                    description: "Especifica el teléfono. Debe ser un string con un formato +57 311-578-4123"
                },
                Email: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                    description: "Especifica el correo electrónico. Debe ser un string con formato usuario@dominio.com"
                }
            }
        }
    }
});
db.cliente.insertMany([
    {
        _id: 1,
        ID_cliente: 1,
        Nombre: "Juan",
        Apellido: "Delgado",
        DNI: "10875712",
        Direccion: "Calle 20",
        Telefono: "+57 318-745-9781",
        Email: "juan@gmail.com"
    },
    {
        _id: 2,
        ID_cliente: 2,
        Nombre: "Sofia",
        Apellido: "Villalobos",
        DNI: "17842438",
        Direccion: "Calle 40",
        Telefono: "+57 311-578-4123",
        Email: "sofia@gmail.com"
    },
    {
        _id: 3,
        ID_cliente: 3,
        Nombre: "Andres",
        Apellido: "Villanueva",
        DNI: "10875758",
        Direccion: "Calle 1",
        Telefono: "+57 312-248-4023",
        Email: "andres@gmail.com"
    },
    {
        _id: 4,
        ID_cliente: 4,
        Nombre: "Jose",
        Apellido: "Garcia",
        DNI: "17824786",
        Direccion: "Calle 2",
        Telefono: "+57 314-000-4023",
        Email: "jose@gmail.com"
    },
    {
        _id: 5,
        ID_cliente: 5,
        Nombre: "Valentina",
        Apellido: "Perez",
        DNI: "10774578",
        Direccion: "Calle 5",
        Telefono: "+57 310-147-0000",
        Email: "valentina@gmail.com"
    },
]);

use("db_campus_alquiler")
db.createCollection("alquiler", {
    capped: true,
    size: 790,
    max: 5
}
)
db.alquiler.insertMany([
    {
        _id: 1,
        ID_alquiler: 1,
        ID_Cliente_id: 1,
        ID_Automovil_id: 1,
        Fecha_Inicio: "2023-08-05",
        Fecha_Fin: "2023-09-20",
        Costo_Total: 500000,
        Estado: "Activo"
    },
    {
        _id: 2,
        ID_alquiler: 2,
        ID_Cliente_id: 2,
        ID_Automovil_id: 2,
        Fecha_Inicio: "2023-07-05",
        Fecha_Fin: "2023-08-20",
        Costo_Total: 1000000,
        Estado: "Activo"
    },
    {
        _id: 3,
        ID_alquiler: 3,
        ID_Cliente_id: 3,
        ID_Automovil_id: 3,
        Fecha_Inicio: "2023-08-05",
        Fecha_Fin: "2023-10-20",
        Costo_Total: 1500000,
        Estado: "Finalizado"
    },
    {
        _id: 4,
        ID_alquiler: 4,
        ID_Cliente_id: 4,
        ID_Automovil_id: 4,
        Fecha_Inicio: "2023-09-05",
        Fecha_Fin: "2024-10-20",
        Costo_Total: 1600000,
        Estado: "Finalizado"
    },
    {
        _id: 5,
        ID_alquiler: 5,
        ID_Cliente_id: 5,
        ID_Automovil_id: 5,
        Fecha_Inicio: "2023-04-25",
        Fecha_Fin: "2023-06-01",
        Costo_Total: 1800000,
        Estado: "Activo"
    },
]);

use("db_campus_alquiler")
db.createCollection("registro_devolucion", {
    capped: true,
    size: 790,
    max: 5
}
)
db.registro_devolucion.insertMany([
    {
        _id: 1,
        ID_registro: 1,
        ID_Alquiler_id: 1,
        ID_Empleado_id: 1,
        Fecha_Devolucion: "2024-01-25",
        Combustible_Devuelto: 2.5,
        Kilometraje_Devuelto: 10000,
        Monto_Adicional: 15000,
    },
    {
        _id: 2,
        ID_registro: 2,
        ID_Alquiler_id: 2,
        ID_Empleado_id: 2,
        Fecha_Devolucion: "2024-01-10",
        Combustible_Devuelto: 5,
        Kilometraje_Devuelto: 50000,
        Monto_Adicional: 50000,
    },
    {
        _id: 3,
        ID_registro: 3,
        ID_Alquiler_id: 3,
        ID_Empleado_id: 3,
        Fecha_Devolucion: "2024-02-10",
        Combustible_Devuelto: 10,
        Kilometraje_Devuelto: 15000,
        Monto_Adicional: 100000,
    },
    {
        _id: 4,
        ID_registro: 4,
        ID_Alquiler_id: 4,
        ID_Empleado_id: 4,
        Fecha_Devolucion: "2024-01-10",
        Combustible_Devuelto: 1.5,
        Kilometraje_Devuelto: 10000,
        Monto_Adicional: 200000,
    },
    {
        _id: 5,
        ID_registro: 5,
        ID_Alquiler_id: 5,
        ID_Empleado_id: 5,
        Fecha_Devolucion: "2024-05-25",
        Combustible_Devuelto: 4.2,
        Kilometraje_Devuelto: 2000,
        Monto_Adicional: 180000,
    },
]);

use("db_campus_alquiler")
db.createCollection("registro_entrega", {
    capped: true,
    size: 790,
    max: 5
}
)
db.registro_entrega.insertMany([
    {
        _id: 1,
        ID_registro: 1,
        ID_Alquiler_id: 1,
        ID_Empleado_id: 1,
        Fecha_Entrega: "2023-12-01",
        Combustible_Entregado: 20,
        Kilometraje_Entregado: 20000
    },
    {
        _id: 2,
        ID_registro: 2,
        ID_Alquiler_id: 2,
        ID_Empleado_id: 2,
        Fecha_Entrega: "2023-11-01",
        Combustible_Entregado: 10,
        Kilometraje_Entregado: 15000
    },
    {
        _id: 3,
        ID_registro: 3,
        ID_Alquiler_id: 3,
        ID_Empleado_id: 3,
        Fecha_Entrega: "2023-12-01",
        Combustible_Entregado: 20,
        Kilometraje_Entregado: 10000
    },
    {
        _id: 4,
        ID_registro: 4,
        ID_Alquiler_id: 4,
        ID_Empleado_id: 4,
        Fecha_Entrega: "2023-12-01",
        Combustible_Entregado: 5,
        Kilometraje_Entregado: 25000
    },
    {
        _id: 5,
        ID_registro: 5,
        ID_Alquiler_id: 5,
        ID_Empleado_id: 5,
        Fecha_Entrega: "2023-09-09",
        Combustible_Entregado: 21,
        Kilometraje_Entregado: 5000
    },
]);

use("db_campus_alquiler")
db.createCollection("empleado", {
    capped: true,
    size: 790,
    max: 5,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["ID_empleado", "Nombre", "Apellido", "DNI", "Direccion", "Cargo"],
            properties: {
                ID_empleado: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 50,
                    description: "Id del empleado. Debe ser un numero en rango de 0 a 50"
                },
                Nombre: {
                    bsonType: "string",
                    pattern: "^[A-Za-z\\s]+$",
                    description: "Nombre del empleado. Debe ser un string sin caracteres especiales"
                },
                Apellido: {
                    bsonType: "string",
                    pattern: "^[A-Za-z\\s]+$",
                    description: "Apellido del empleado. Debe ser un string sin caracteres especiales"
                },
                DNI: {
                    bsonType: "string",
                    pattern: "^[0-9]{7,8}$",
                    description: "Especifica el número de documento de identidad. Debe ser un número de 7 a 8 dígitos."
                },
                Direccion: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z0-9\\s\\.,#-]+$",
                    description: "Especifica la direccion. Debe ser un string"
                },
                Telefono: {
                    bsonType: "string",
                    pattern: "^(?:(?:\\+\\d{1,3}|0)[\\d- ]+)?\\d+$",
                    description: "Especifica el teléfono. Debe ser un string con un formato +57 311-578-4123"
                },
                Cargo: {
                    bsonType: "string",
                    pattern: "^[A-Za-z\\s]+$",
                    description: "Cargo del empleado. Debe ser un string sin caracteres especiales"
                }
            }
        }
    }
}
)
db.empleado.insertMany([
    {
        _id: 1,
        ID_empleado: 1,
        Nombre: "Valeria",
        Apellido: "Velasco",
        DNI: "78475474",
        Direccion: "Calle 2",
        Telefono: "+57 301-586-9547",
        Cargo: "Gerente"
    },
    {
        _id: 2,
        ID_empleado: 2,
        Nombre: "Nataly",
        Apellido: "Archiniegas",
        DNI: "18075874",
        Direccion: "Calle 11",
        Telefono: "+57 321-014-5874",
        Cargo: "Asistente"
    },
    {
        _id: 3,
        ID_empleado: 3,
        Nombre: "Amanda",
        Apellido: "Miguel",
        DNI: "98445470",
        Direccion: "Calle 16",
        Telefono: "+57 301-147-7425",
        Cargo: "Asistente"
    },
    {
        _id: 4,
        ID_empleado: 4,
        Nombre: "Leonardo",
        Apellido: "Diaz",
        DNI: "54015474",
        Direccion: "Calle 45",
        Telefono: "+57 316-123-985",
        Cargo: "Vendedor"
    },
    {
        _id: 5,
        ID_empleado: 5,
        Nombre: "Andres",
        Apellido: "Manosalva",
        DNI: "17565274",
        Direccion: "Calle 25",
        Telefono: "+57 301-586-9547",
        Cargo: "Matenimiento"
    },
]);

//? Consultas 

//? 1. Mostrar todos los clientes regisautomovilestrados en la base de datos.
use("db_campus_alquiler");
db.cliente.find()

//? 2. Obtener todos los automóviles disponibles para alquiler.
use("db_campus_alquiler");
db.automovil.aggregate([
    {
        $lookup: {
            from: "alquiler",
            localField: "ID_automovil",
            foreignField: "ID_Automovil_id",
            as: "Alquileres",
        }
    },
    {
        $project: {
            "ID_automovil_id": 0,
            "Alquileres.ID_Alquiler": 0,
            "Alquileres.ID_Automovil_id": 0,
            "Alquileres.ID_Cliente_id": 0
        }
    },
    {
        $unwind: "$Alquileres"
    },
    {
        $match: {
            Alquileres: { $exists: true, $ne: [] }
        }
    }

]);

//? 3. Listar todos los alquileres activos junto con los datos de los clientes relacionados.
use("db_campus_alquiler");
db.cliente.aggregate([
    {
        $lookup: {
            from: "alquiler",
            localField: "_id",
            foreignField: "ID_Cliente_id",
            as: "Alquileres",
        },
    },
    {
        $project: {
            "Alquileres._id": 0,
            "Alquileres.ID_alquiler": 0,
            "Alquileres.ID_Automovil_id": 0,
            "Alquileres.ID_Cliente_id": 0
        }
    },
    {
        $unwind: "$Alquileres"
    },
    {
        $match: {
            "Alquileres.Estado": {
                $eq: true
            }
        }
    }
]);

//? 4. Mostrar todas las reservas pendientes con los datos del cliente y el automóvil reservado.
use("db_campus_alquiler");
db.reserva.aggregate([
    {
        $lookup: {
            from: "automovil",
            localField: "ID_Automovil_id",
            foreignField: "_id",
            as: "Automoviles"
        },
    },
    {
        $lookup: {
            from: "cliente",
            localField: "ID_Cliente_id",
            foreignField: "_id",
            as: "Clientes"
        }
    },
    {
        $unwind: "$Automoviles",
    },
    {
        $unwind: "$Clientes"

    },
    {
        $match: {
            Estado: { $eq: "Pendiente" }
        }
    },
    {
        $project: {
            "_id": 0,
            "Estado": 0,
            "ID_reserva": 0,
            "ID_Cliente_id": 0,
            "ID_Automovil_id": 0,
            "Clientes._id": 0,
            "Clientes.ID_cliente": 0,
            "Automoviles._id": 0,
            "Automoviles.ID_cliente": 0,
            "Automoviles.ID_Automovil_id": 0

        }
    }
]);

//? 5. Obtener los detalles del alquiler con el ID_Alquiler específico. 
use("db_campus_alquiler");
db.alquiler.find({ ID_alquiler: { $eq: 3 } });

//? 6. Listar los empleados con el cargo de "Vendedor"
use("db_campus_alquiler");
db.empleado.find({ Cargo: { $eq: "Vendedor" } })

//? 7. Cantidad total de automoviles de cada sucursal
use("db_campus_alquiler");
db.sucursal.aggregate([
    {
        $lookup: {
            from: "sucursal_automovil",
            localField: "_id",
            foreignField: "ID_Sucursal_id",
            as: "Automoviles"
        }
    },
    {
        $unwind: "$Automoviles"
    },
    {
        $project: {
            "_id": 0,
            "Automoviles._id": 0,
            "Automoviles.ID_Sucursal_id": 0,
            "Automoviles.ID_Automovil": 0,
            "Automoviles.Name": 0,
        }
    }


])

//? 8. Obtener el costo total de un alquiler específico. 
use("db_campus_alquiler");
db.alquiler.aggregate([
    {
        $match: {
            ID_alquiler: { $eq: 4 }
        }
    },
    {
        $project: {
            "_id": 0,
            "ID_alquiler": 0,
            "ID_Automovil_id": 0,
            "ID_Cliente_id": 0,
            "Fecha_Inicio": 0,
            "Fecha_Fin": 0,
            "Fecha_Fin": 0,
            "Estado": 0
        }
    }
]);

//? 9 .Listar los clientes con el DNI específico. 
use("db_campus_alquiler");
db.cliente.aggregate([
    {
        $match: {
            DNI: { $eq: 17842438 }
        }
    },
    {
        $project: {
            "ID_cliente": 0,
            "_id": 0
        }
    }
]);

//? 10. Mostrar todos los automóviles con una capacidad mayor a 5 personas
use("db_campus_alquiler");
db.automovil.find({ capacidad: { $gt: 5 } });

//? 11. Obtener los detalles del alquiler que tiene fecha de inicio en '2023-07-05'
use("db_campus_alquiler");
db.alquiler.find({ Fecha_Inicio: { $eq: "2023-07-05" } })

//? 12. Listar las reservas pendientes realizadas por un cliente específico
use("db_campus_alquiler");
db.cliente.aggregate([
    {
        $lookup: {
            from: "reserva",
            localField: "ID_cliente",
            foreignField: "ID_Cliente_id",
            as: "Reservas"
        }
    },
    {
        $unwind: "$Reservas"
    },
    {
        $match: {
            $and: [{ "Reservas.Estado": { $eq: "Pendiente" } }, { ID_cliente: { $eq: 3 } }]
        }
    },
    {
        $group: {
            _id: "$ID_cliente",
            Cliente: { $first: "$$ROOT" }, // Usamos $$ROOT para mantener el documento completo del cliente
            Reservas: { $push: "$Reservas" } // Agrupamos las reservas en un arreglo
        }
    },
    {
        $project: {
            "_id": 0,
            "Cliente._id": 0,
            "Cliente.ID_cliente": 0,
            "Cliente.Reservas": 0,
            "Reservas._id": 0,
            "Reservas.ID_reserva": 0,
            "Reservas.ID_Cliente_id": 0,
            "Reservas.ID_Automovil_id": 0,
        }
    }
]);

//? 13. Mostrar los empleados con cargo de "Gerente" o "Asistente".
use("db_campus_alquiler");
db.empleado.find({
    $or: [
        { Cargo: { $eq: "Gerente" } },
        { Cargo: { $eq: "Asistente" } }
    ]
});

//? 14. Obtener los datos de los clientes que realizaron al menos un alquiler.
use("db_campus_alquiler");
db.cliente.aggregate([
    {
        $lookup: {
            from: "alquiler",
            localField: "ID_cliente",
            foreignField: "ID_Cliente_id",
            as: "Alquileres",
        }
    },
    {
        $unwind: "$Alquileres"
    },
    {
        $match: {
            Alquileres: { $exists: true, $ne: [], }
        }
    },
    {
        $group: {
            _id: "$ID_cliente",
            Cliente: { $first: "$$ROOT" }, // Usamos $$ROOT para mantener el documento completo del cliente
            Alquileres: { $push: "$Alquileres" } // Agrupamos las reservas en un arreglo
        }
    },
    {
        $project: {
            "_id": 0,
            "Cliente._id": 0,
            "Cliente.ID_cliente": 0,
            "Cliente.Alquileres": 0,
            "Alquileres._id": 0,
            "Alquileres.ID_alquiler": 0,
            "Alquileres.ID_Cliente_id": 0,
            "Alquileres.ID_Automovil_id": 0,
        }
    },

]);

//? 15. Listar todos los automóviles ordenados por marca y modelo. 
use("db_campus_alquiler");
db.automovil.find().sort(
    { Marca: 1 },
    { Modelo: 1 }
);

//? 16. Mostrar la cantidad total de automóviles en cada sucursal junto con su dirección
use("db_campus_alquiler");
db.sucursal.aggregate([
    {
        $lookup: {
            from: "sucursal_automovil",
            localField: "_id",
            foreignField: "ID_Sucursal_id",
            as: "Automoviles"
        }
    },
    {
        $unwind: "$Automoviles"
    },
    {
        $group: {
            _id: "$_id",
            Nombre: { $first: "$Nombre" },
            Direccion: { $first: "$Direccion" },
            Telefono: { $first: "$Telefono" },
            Cantidad_Total: { $sum: "$Automoviles.cantidad" }

        }

    },
    {
        $project: {
            "_id": 0,
            "Nombre": 1,
            "Direccion": 1,
            "Telefono": 1,
            "Cantidad_Total": 1
        }
    }
])

//? 17. Obtener la cantidad total de alquileres registrados en la base de datos
use("db_campus_alquiler");
db.alquiler.countDocuments({});

//? 18. .Mostrar los automóviles con capacidad igual a 5 personas y que estén disponibles
use("db_campus_alquiler");
db.automovil.find({
    $and: [
        {
            capacidad: { $eq: 5 },
        },
        {
            Estado: { $eq: "Disponible" }
        }
    ]
});

//? 19. Listar los alquileres con fecha de inicio entre '2023-07-05' y '2023-07-10'
use("db_campus_alquiler");
db.alquiler.find({
    Fecha_Inicio: { $gte: new Date("2023-07-05T00:00:00.000+00:00"), $lte: new Date("2023-07-10T00:00:00.000+00:00") }
});